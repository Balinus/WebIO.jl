var documenterSearchIndex = {"docs":
[{"location":"#WebIO.jl-1","page":"WebIO.jl","title":"WebIO.jl","text":"","category":"section"},{"location":"#","page":"WebIO.jl","title":"WebIO.jl","text":"Documentation for WebIO.jl","category":"page"},{"location":"gettingstarted/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#Installing-WebIO-1","page":"Getting Started","title":"Installing WebIO","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"WebIO is installed just like any other Julia package.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkd.add(\"WebIO\")\nusing WebIO","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Make sure to watch for any errors during the build process; WebIO does its best to install everything to the right location, but sometimes it can't find all the right things (especially for Jupyter). If you get any warnings, please file an issue on GitHub.","category":"page"},{"location":"gettingstarted/#Displaying-to-a-Frontend-1","page":"Getting Started","title":"Displaying to a Frontend","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"First, load the appropriate frontend (e.g. Jupyter or Blink or Atom/Juno). For simplicity, Jupyter is recommended while you're getting started.","category":"page"},{"location":"gettingstarted/#Jupyter-1","page":"Getting Started","title":"Jupyter","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"In a Julia Jupyter notebook (either via the classic notebook interface or in JupyterLab), any WebIO content is automagically rendered into the browser. For example, try displaying a paragraph.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"In[*]: node(:p, \"Hello, Jupyter\")","category":"page"},{"location":"gettingstarted/#Blink-1","page":"Getting Started","title":"Blink","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Blink is a Julia interface for Electron (a way to write desktop apps using web technologies). WebIO content can be displayed in a Blink window using the body! function.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using Blink\nw = Window()\nbody!(w, dom\"p\"(\"Hello, Blink!\"))","category":"page"},{"location":"gettingstarted/#Mux-1","page":"Getting Started","title":"Mux","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Return a WebIO Node from a web app to render it. Use webio_serve to serve the application.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"function myapp(req)\n    return node(:p, \"Hello, Mux!\")\nend\n\nwebio_serve(page(\"/\", req -> myapp(req)))","category":"page"},{"location":"gettingstarted/#Generic-HTTP-1","page":"Getting Started","title":"Generic HTTP","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"# Create your own display function\nfunction Base.display(d::MyWebDisplay, m::WebIO.WEBIO_APPLICATION_MIME, app)\n    println(d.io, \"outer html\")\n    # Calling show will make sure a server is running and serves dependencies\n    # from AssetRegistry and a websocket connection gets established.\n    show(d.io, m, app) #<- prints the html + scripts webio needs to work into io\n    println(d.io, \"close outer html\")\nend","category":"page"},{"location":"gettingstarted/#Juno-1","page":"Getting Started","title":"Juno","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"WebIO nodes should be automatically rendered when displayed.","category":"page"},{"location":"gettingstarted/#Composing-Content-1","page":"Getting Started","title":"Composing Content","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Suppose we want to display the following HTML.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"<ul class=\"my-list\">\n    <li>get milk</li>\n    <li>make a pie</li>\n</ul>","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"We can nest nodes inside of each other to accomplish this.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Node(\n    :ul,\n    Node(:li, \"get milk\"),\n    Node(:li, \"make a pie\"),\n    attributes=Dict(:class => \"my-list\"),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Some DOM properties (most importantly, style and events) can be specified as Julia dictionaries.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Node(\n    :div,\n    \"Hello, world!\",\n    style=Dict(\n        :backgroundColor => \"black\",\n        :color => \"white\",\n        :padding => \"12px\",\n   ),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"This is equivalent to this snippet using attributes.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Node(\n    :div,\n    \"Hello, World\",\n    attributes=Dict(\n        :style => \"background-color: black; color: white; padding: 12px\",\n    ),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Checkout out the Node reference for more information.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe attributes keyword argument sets the attributes of the HTML element (via the setAttribute DOM API function). Any other keyword argument is set as the property of the DOM node itself.N.B. Attribute values should be strings (or nothing, in which case the attribute is deleted). Attribute keys are specified with the name as would be written in HTML (e.g. class for the CSS class name) whereas properties are specified as the name in the browser DOM API (e.g. className). This is because one writes<p class=\"important\">Don't stuff beans up your nose!</p>whereas the DOM API would bemyParagraph = document.createElement(\"p\");\nmyParagraph.className = \"important\";\n// Or, equivalently...\nmyParagraph.setAttribute(\"class\", \"important\");For example, the following are equivalent.node(:ul, className=\"my-list\")\nnode(:ul, attributes=Dict(:class => \"my-list\"))When in doubt, use attributes for everything except the style and events properties.","category":"page"},{"location":"gettingstarted/#The-dom\"\"-macro-1","page":"Getting Started","title":"The dom\"\" macro","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The dom\"\" string macro can be used to simplify the creation of DOM nodes and is based on the querySelector DOM API. The syntax for the macro is","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"dom\"<tag>.<class>#<id>[<attr>=<value>,...]\"(children...; props...)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"which is equivalent to","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Node(\n    :tag,\n    children...,\n    className=\"<class>\",\n    id=\"<id>\",\n    attributes=Dict(:attr1 => val1, :attr2 => val2...);\n    props...\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"For example","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"dom\"div.warning.big-text#my-modal[aria-modal=true]\"(\n    dom\"p\"(\"Uh oh! A bad thing happened.\"),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"yields this HTML","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"<div id=\"my-modal\" class=\"warning big-text\" aria-modal=\"true\">\n    <p>Uh oh! A bad thing happened.</p>\n</div>","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Everything except the tag is optional, so all of these are valid.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"dom\"div\"\ndom\"div.class1\"\ndom\"div.class1.class2\"\ndom\"div#my-id\"\ndom\"input.check[type=checkbox]\"","category":"page"},{"location":"gettingstarted/#JavaScript-1","page":"Getting Started","title":"JavaScript","text":"","category":"section"},{"location":"gettingstarted/#Executing-JavaScript-1","page":"Getting Started","title":"Executing JavaScript","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Event handlers can be set up by passing a dict as the events keyword argument to Node, (and the dom\"\" macro). For example,","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"dom\"button\"(\n    \"Greet\",\n     events=Dict(\n        \"click\" => js\"function() { alert('Hello, World!'); }\",\n    ),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"This will create a button which shows an alert box with the message \"Hello, World!\" when clicked.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"There are 2 ways to write JavaScript in conjunction with WebIO. First, you can use the js\"\" string macro to just write any JavaScript as a string. For example","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"js\"\"\"\nalert(\"Hello, World!\")\n\"\"\"","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"This will return an object of type JSString which can be used anywhere WebIO expects JavaScript expressions. The js\"\" macro also appropriately escapes any interpolated variables.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"julia> myvar = [1, \"foo\", Dict(\"foo\" => \"bar\")];\njulia> println(js\"console.log($myvar);\")\nconsole.log([1,\"foo\",{\"foo\":\"bar\"}]);","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The second way is to use the @js macro from JSExpr.jl. The @js macro can translate arbitrary Julia expressions to the equivalent JavaScript.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using JSExpr\n@js alert(\"Hello, World!\")","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"We can rewrite our greeting example above using the @js macro too.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"dom\"button\"(\n    \"Greet\",\n    events=Dict(\n        \"click\" => (@js () -> alert(\"Hello, World!\")),\n    ),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe variables and functions you reference in a @js expression must be defined in the JavaScript context where the expression will be executed (for example, in an event callback) and do not need to be defined in Julia.Values from Julia can be interpolated into both the js\"\" and @js macros, but this interpolation happens when the JSString is created (and not when the JavaScript code is executed).For example, consider the following snippet.myname = \"Walter\"\ndisplay(dom\"button\"(\"Greet Me!\", events=Dict(\"click\" => @js alert($myname))))When you click the button, it will alert \"Walter\" as expected. But if you later change the value of myname,myname = \"Sylvia\"clicking the button will still result in \"Walter\" since the value of myname was interpolated when the expression was parsed.See Communicating between Julia and JavaScript to learn how to use the latest value of a variable in either Julia or JavaScript.","category":"page"},{"location":"gettingstarted/#Communicating-between-Julia-and-JavaScript-1","page":"Getting Started","title":"Communicating between Julia and JavaScript","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"A [Scope])(@ref) acts as a medium for bidirectional communication between Julia and JavaScript. The primary method of communication is Observables which are essentially wrappers around values that may change over time. A [Scope] may contain several observables whose values can be updated and read from either JavaScript or Julia.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"We associate an observable with a scope as follows.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"w = Scope()\nobs = Observable(w, \"rand-value\", 0.0)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The \"rand-value\" arguments is the name of the observable and must be unique for a given scope.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"You can get the value of obs in Julia with the syntax obs[]. You can set the value using the syntax obs[] = val. To listen to changes to the value you can use the on function to set up a listener.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"on((value) -> println(\"Value is now $(value)!\"), obs)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"or, using do-block syntax,","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"on(obs) do value\n    println(\"Value is now $(value)!\")\nend","category":"page"},{"location":"gettingstarted/#Sending-values-from-JavaScript-to-Julia-1","page":"Getting Started","title":"Sending values from JavaScript to Julia","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Sending values from JavaScript to Julia is easiest via the @js macro. Consider this simple example.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"scope = Scope()\nobs = Observable(scope, \"rand-value\", 0.0)\n\non(obs) do x\n    println(\"JavaScript sent $(x)!\")\nend\n\nscope(\n    dom\"button\"(\n        \"Generate Random Number\",\n        events=Dict(\"click\" => @js () -> $obs[] = Math.random()),\n    ),\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"note: Note\nNotice that the last expression actually calls the scope scope with the contents that should be displayed. This causes the contents to be wrapped in the scope's context. All uses of observables associated with scope (e.g. obs) should be enclosed in the scope scope.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Note that we use the syntax $obs[] = ... inside the @js macro to update the value of the obs Observable.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Using the js\"\" macro, we can write","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"js\"_webIOScope.getObservableValue('obs')\"","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"and","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"_webIOScope.setObservableValue(\"obs\", ...);","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"wherever we want to get and set the values of observables (respectively).","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"note: Note\nThe values of WebIO and _webIOScope are defined when executing any JavaScript code in WebIO. The value of _webIOScope is the nearest ancestor scope (or undefined if there is none).","category":"page"},{"location":"gettingstarted/#Sending-values-from-Julia-to-JavaScript-1","page":"Getting Started","title":"Sending values from Julia to JavaScript","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"The onjs function allows us to hook up a JavaScript listener on an Observable just like we can use on for a Julia listener. For example, we can log to the console whenever the value of our observable changes.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"s = Scope()\nobs = Observable(s, \"logme\", \"\")\nonjs(\n    s, \"logme\",\n    js\"\"\"\n    function(newValue) {\n        console.log(newValue);\n    }\n    \"\"\"\n)","category":"page"},{"location":"gettingstarted/#Rendering-Observables-1","page":"Getting Started","title":"Rendering Observables","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"For an even easier way to send values from Julia to JavaScript, we can simply rely on the fact that WebIO knows how to render Observables directly to HTML. In this case WebIO will automatically construct a Scope and insert the relevant JavaScript to update the rendered content whenever the Observable changes value.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using Dates\ntimestr() = Dates.format(now(), \"HH:MM:SS\")\n\ntime = Observable(timestr())\n@async while true\n    sleep(1)\n    time[] = timestr()\nend\n\ndisplay(time)","category":"page"},{"location":"gettingstarted/#Loading-JavaScript-dependencies-1","page":"Getting Started","title":"Loading JavaScript dependencies","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"You can load dependencies by creating a Scope object and providing the imports argument. The onmount function will add a mount callback to a scope that will be called with all of the dependencies provided via the imports argument.","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using WebIO, JSExpr\n\nw = Scope(imports=[\"//cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.11/p5.js\"])\nonmount(w, @js function (p5)\n    function sketch(s)\n        s.setup = () -> s.createCanvas(640, 480)\n\n        s.draw = function ()\n          if s.mouseIsPressed\n            s.fill(0)\n          else\n            s.fill(255)\n          end\n          s.ellipse(s.mouseX, s.mouseY, 80, 80)\n        end\n    end\n    @new p5(sketch, this.dom.querySelector(\".container\"))\nend)\nw(dom\"div.container\"())","category":"page"},{"location":"gettingstarted/#Examples-1","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"gettingstarted/#Clock-(Julia-to-JS-Communication)-1","page":"Getting Started","title":"Clock (Julia to JS Communication)","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"s = Scope()\ns(dom\"span.current-time\"())\ntime = Observable(s, \"time\", \"\")\ntimestr() = Dates.format(now(), \"HH:MM:SS\")\n\n# Update the time every second\n@async while true\n    time[] = timestr()\n    sleep(1)\nend\n\n# Setup a JavaScript listener\nonjs(\n    s, \"time\",\n    js\"\"\"\n    function(time) {\n        this.dom.querySelector(\".current-time\").textContent = time;\n    }\n    \"\"\"\n)","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"note: Note\nIn the onjs callback, this is set to the Scope object (though the value of _webIOScope is also set, as noted above).The value of this.dom refers to the DOM node of the scope. Importantly, this is not the content of the scope, but rather, the DOM node that encloses the scope (so we need to use querySelector to find the actual DOM node that we want to update). For example, consider a scope whose content is simply a <span />; the value of this.dom will be a <div /> whose only child is that <span />.","category":"page"},{"location":"api/about/#About-This-Reference-1","page":"About This Reference","title":"About This Reference","text":"","category":"section"},{"location":"api/about/#","page":"About This Reference","title":"About This Reference","text":"Each section in this reference is divided into three subsections.","category":"page"},{"location":"api/about/#Public-API-1","page":"About This Reference","title":"Public API","text":"","category":"section"},{"location":"api/about/#","page":"About This Reference","title":"About This Reference","text":"These are the bits of the WebIO API that are exported and are meant for direct end-user consumption.","category":"page"},{"location":"api/about/#Internal-API-1","page":"About This Reference","title":"Internal API","text":"","category":"section"},{"location":"api/about/#","page":"About This Reference","title":"About This Reference","text":"These are the bits of the API that are not exported but are also not considered implementation details. Frequently, libraries that are built on top of WebIO will extend methods like WebIO.render which are considered part of the internal API.","category":"page"},{"location":"api/about/#Private-API-1","page":"About This Reference","title":"Private API","text":"","category":"section"},{"location":"api/about/#","page":"About This Reference","title":"About This Reference","text":"These are the bits of the API that are considered implementation details. These pieces of the API may be modified, created, or removed without notice. They are documented here for completeness only.","category":"page"},{"location":"api/node/#Nodes-1","page":"Nodes","title":"Nodes","text":"","category":"section"},{"location":"api/node/#Public-API-1","page":"Nodes","title":"Public API","text":"","category":"section"},{"location":"api/node/#","page":"Nodes","title":"Nodes","text":"Node\nnode","category":"page"},{"location":"api/node/#WebIO.Node","page":"Nodes","title":"WebIO.Node","text":"Node(instanceof, children...; props...)\nNode(instanceof, children, props)\n\nThe building block of WebIO. A Node is simply a wrapper around an instance (some Julia object) together with some child nodes and additional properties.\n\nThe most common type of Node is a DOM node. These can be constructed just by specifying a symbol as the instanceof (they are promoted to an instance of WebIO.DOM under the hood).\n\njulia> Node(:div, Node(:p, \"I am a paragraph!\", class=\"important\"))\n(div\n  (p { class=\"important\" }\n    \"I am a paragraph!\"))\n\nNodes with custom (non-DOM) instances should have a corresponding WebIO.render method defined.\n\n\n\n\n\n","category":"type"},{"location":"api/scope/#Scopes-1","page":"Scopes","title":"Scopes","text":"","category":"section"},{"location":"api/scope/#Public-API-1","page":"Scopes","title":"Public API","text":"","category":"section"},{"location":"api/scope/#","page":"Scopes","title":"Scopes","text":"Scope","category":"page"},{"location":"api/scope/#WebIO.Scope","page":"Scopes","title":"WebIO.Scope","text":"Scope(<keyword arguments>)\n\nAn object which can send and receive messages.\n\nArguments\n\ndom: The DOM node that will be rendered when the scope is displayed in the   browser.\nimports: An collection of Assets to load (see Asset for   more documentation) when the scope is mounted. If the entry is not an   Asset then it should be an argument to construct an Asset.\n\nExamples\n\nmyscope = Scope(\n    dom=node(:p, \"I'm a little scope!\"),\n    imports=[Asset(\"foo.js\"), \"bar.css\", \"spam\" => \"spam.js\"],\n)\n\n\n\n\n\n","category":"type"},{"location":"api/render/#Render-1","page":"Render","title":"Render","text":"","category":"section"},{"location":"api/render/#","page":"Render","title":"Render","text":"The WebIO.render function is the primary method of extending WebIO and providing interoperability between WebIO and other libraries. For example, one could define a custom method to render a MyPlot type. See the Extending WebIO documentation for more information.","category":"page"},{"location":"api/render/#Internal-API-1","page":"Render","title":"Internal API","text":"","category":"section"},{"location":"api/render/#","page":"Render","title":"Render","text":"WebIO.register_renderable\nWebIO.render","category":"page"},{"location":"api/render/#WebIO.register_renderable","page":"Render","title":"WebIO.register_renderable","text":"`WebIO.register_renderable(MyType::Type)`\n\nRegisters that a WebIO.render method is available for instances of MyType. Allows WebIO to hook into the display machinery of backends such as Atom and IJulia to display the WebIO rendered version of the type as appropriate.\n\nAlso defines a Base.show(io::IO, m::MIME\"text/html\", x::MyType) as Base.show(io, m, WebIO.render(x))\n\n\n\n\n\n","category":"function"},{"location":"api/render/#WebIO.render","page":"Render","title":"WebIO.render","text":"render(x::MyType)\n\nGeneric function that defines how a Julia object is rendered. Should return a Node object.\n\nExamples\n\nstruct MyPlot\n    s::Scope\nend\n\nWebIO.render(p::MyPlot) = WebIO.render(p.s)\n\n\n\n\n\n","category":"function"},{"location":"api/render/#Private-API-1","page":"Render","title":"Private API","text":"","category":"section"},{"location":"api/render/#","page":"Render","title":"Render","text":"WebIO.observable_to_scope","category":"page"},{"location":"api/render/#WebIO.observable_to_scope","page":"Render","title":"WebIO.observable_to_scope","text":"Wrap an observable in a scope to enable \"live updating.\"\n\nThis method also contains distinct code paths for the cases where the observable contains \"non-simple\" data types (in particular, observables that contain Nodes, Scopes, or Widgets need specially handling).\n\n\n\n\n\n","category":"function"},{"location":"api/asset/#Assets-1","page":"Assets","title":"Assets","text":"","category":"section"},{"location":"api/asset/#Public-API-1","page":"Assets","title":"Public API","text":"","category":"section"},{"location":"api/asset/#","page":"Assets","title":"Assets","text":"Asset","category":"page"},{"location":"api/jsstring/#JSString-1","page":"JSString","title":"JSString","text":"","category":"section"},{"location":"api/jsstring/#Public-API-1","page":"JSString","title":"Public API","text":"","category":"section"},{"location":"api/jsstring/#","page":"JSString","title":"JSString","text":"@js_str","category":"page"},{"location":"api/jsstring/#WebIO.@js_str","page":"JSString","title":"WebIO.@js_str","text":"@js_str(s)\n\nCreate a JSString using a string literal and perform interpolations from Julia.\n\nExamples\n\njulia> mystr = \"foo\"; mydict = Dict(\"foo\" => \"bar\", \"spam\" => \"eggs\");\njulia> println(js\"const myStr = $mystr; const myObject = $mydict;\")\nconst myStr = \"foo\"; const myObject = {\"spam\":\"eggs\",\"foo\":\"bar\"};\n\n\n\n\n\n","category":"macro"},{"location":"api/jsstring/#Internal-API-1","page":"JSString","title":"Internal API","text":"","category":"section"},{"location":"api/jsstring/#","page":"JSString","title":"JSString","text":"WebIO.JSString\nWebIO.tojs","category":"page"},{"location":"api/jsstring/#WebIO.tojs","page":"JSString","title":"WebIO.tojs","text":"tojs(x)\n\nReturns a JSString object that constructs the same object as x\n\n\n\n\n\n","category":"function"},{"location":"api/observable/#Observables-1","page":"Observables","title":"Observables","text":"","category":"section"},{"location":"api/observable/#Internal-API-1","page":"Observables","title":"Internal API","text":"","category":"section"},{"location":"api/observable/#","page":"Observables","title":"Observables","text":"WebIO.ObservableNode","category":"page"},{"location":"providers/ijulia/#IJulia-1","page":"IJulia","title":"IJulia","text":"","category":"section"},{"location":"providers/ijulia/#JupyterLab-Considerations-1","page":"IJulia","title":"JupyterLab Considerations","text":"","category":"section"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"JupyterLab presents a few issues that are different that than those associated with the classic notebook. JupyterLab extensions are bundled together with the core application code (so that all of the JavaScript associated with JupyterLab is served as a single file).","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"This can sometimes present issues if there are multiple versions of JupyterLab installed on a system (e.g. for multiple virtual environments or if installed using Conda and Pip) because these bundles are separate for each JupyterLab installation.","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"note: Note\nFor example, if you installed JupyterLab via pip install --user jupyterlab and pip install jupyterlab in a virtualenv at ~/venv, then there will be two bundles (at ~/.local/share/jupyter/lab/ and ~/env/share/jupyter/lab/ respectively, on Linux).","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"This presents issues when the JupyterLab that is launched is not the JupyterLab that WebIO was installed for (for example, the labextension was installed for the Conda version of JupyterLab but you're launching the version that is installed in a Python virtual environment).","category":"page"},{"location":"providers/ijulia/#Fixing-Things-Up-1","page":"IJulia","title":"Fixing Things Up","text":"","category":"section"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"If you suspect that WebIO isn't installed for a specific version of JupyterLab, you can check with the jupyter labextension list command. First, make sure that you're using the version of JupyterLab that you mean to be using (this usually entails activating the correct Conda environment or Python virtual environment).","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"$ which jupyter\n/home/user/.local/bin/jupyter","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"Then, make sure that the WebIO extension is installed. The output should look something like this (though the specific versions and paths will likely be different).","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"$ jupyter labextension list\nJupyterLab v0.35.5\nKnown labextensions:\n   app dir: /home/user/.julia/conda/3/share/jupyter/lab\n        @webio/jupyter-lab-provider v0.8.3  enabled  OK*\n\n   local extensions:\n        @webio/jupyter-lab-provider: /home/user/.julia/dev/WebIO/packages/jupyter-lab-provider\n\n   linked packages:\n        @webio/webio: /home/user/.julia/dev/WebIO/packages/webio","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"If the WebIO extension isn't present, then simply fire up Julia and install it. This can either be done by running Pkg.build(\"WebIO\") or by running","category":"page"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"using WebIO, IJulia\nWebIO.install_jupyter_labextension()","category":"page"},{"location":"providers/ijulia/#API-Reference-1","page":"IJulia","title":"API Reference","text":"","category":"section"},{"location":"providers/ijulia/#","page":"IJulia","title":"IJulia","text":"WebIO.find_jupyter_cmd\nWebIO.install_jupyter_labextension\nWebIO.install_jupyter_nbextension\nWebIO.install_jupyter_serverextension","category":"page"},{"location":"providers/ijulia/#WebIO.find_jupyter_cmd","page":"IJulia","title":"WebIO.find_jupyter_cmd","text":"find_jupyter_cmd()\n\nFind the most likely candidate for the jupyter executable. This will locate jupyter by searching the PATH environment variable and, if not found, tries to return Conda.jl's jupyter. If both of these approaches fail, an error is thrown.\n\n\n\n\n\n","category":"function"},{"location":"providers/ijulia/#WebIO.install_jupyter_labextension","page":"IJulia","title":"WebIO.install_jupyter_labextension","text":"install_jupyter_labextension([jupyter])\n\nInstall the Jupyter Lab extension for WebIO using the specified jupyter executable. The executable defaults to the first one found in the PATH or Jupyter installed via Conda.jl.\n\nThe IJulia provider documentation provides some more information (and caveats) about the relationship between Jupyter Lab and WebIO.\n\n\n\n\n\n","category":"function"},{"location":"providers/ijulia/#WebIO.install_jupyter_nbextension","page":"IJulia","title":"WebIO.install_jupyter_nbextension","text":"install_webio_nbextension()\n\nInstall the Jupyter Notebook extension (nbextension) for WebIO. This copies the nbextension code to the appropriate place and wr9tes the appropriate configuration files.\n\n\n\n\n\n","category":"function"},{"location":"providers/ijulia/#WebIO.install_jupyter_serverextension","page":"IJulia","title":"WebIO.install_jupyter_serverextension","text":"install_notebook_config()\n\nInstall necessary configuration for the jlstaticserve notebook (server) extension. This function only configures the notebook extension, not the browser nbextension or Jupyter Lab extension.\n\nAdds the path to ./deps to Python's sys.path so that we can load the   jlstaticserve.py extension. This is done in jupyter_notebook_config.py   because there's no way to add to sys.path from the JSON config file.\nAdds jlstaticserve to the list of extensions loaded in the notebook server.   This is done in jupyter_notebook_config.json because that file has higher   precedence when both the .py and .json files exist (IPyWidgets, for   example, writes to the JSON file, so if we only wrote to the .py file,   that directive would take precedence and the jlstaticserve extension would   not be loaded).\n\n\n\n\n\n","category":"function"},{"location":"providers/blink/#Blink-1","page":"Blink","title":"Blink","text":"","category":"section"},{"location":"providers/mux/#Blink-1","page":"Blink","title":"Blink","text":"","category":"section"},{"location":"providers/mux/#API-Reference-1","page":"Blink","title":"API Reference","text":"","category":"section"},{"location":"providers/mux/#","page":"Blink","title":"Blink","text":"WebIO.webio_serve","category":"page"},{"location":"providers/mux/#WebIO.webio_serve","page":"Blink","title":"WebIO.webio_serve","text":"webio_serve(app, port=8000)\n\nServe a Mux app which might return a WebIO node.\n\n\n\n\n\n","category":"function"},{"location":"extending/#Extending-WebIO-1","page":"Extending WebIO","title":"Extending WebIO","text":"","category":"section"},{"location":"extending/#Rendering-Custom-Objects-1","page":"Extending WebIO","title":"Rendering Custom Objects","text":"","category":"section"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"WebIO defines the WebIO.render function which can be extended to render any Julia type into the DOM. Think of it as a better version of show(io::IO, m::MIME\"text/html\", x) (where the output is a tree of Node's instead of an HTML string).","category":"page"},{"location":"extending/#Learning-By-Example-1","page":"Extending WebIO","title":"Learning By Example","text":"","category":"section"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"Suppose we want to teach WebIO how to render our to-do list type. Given a TodoItem like","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"struct TodoItem\n    description::String\n    done::Bool\nend","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"we might define a render method such as","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"function WebIO.render(todoitem::TodoItem)\n    return dom\"div.todo-item\"(\n        dom\"input[type=checkbox]\"(checked=todoitem.done),\n        todoitem.description,\n        style=Dict(\"display\" => \"flex\", \"flex-direction\" => \"horizontal\"),\n    )\nend","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"If we have a to-do list that looks like","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"struct TodoList\n    title::String\n    items::Vector{TodoItem}\nend\n\nmylist = TodoList(\n    \"My todo list\",\n    [\n        TodoItem(\"Make my first WebIO widget\", false),\n        TodoItem(\"Make a pie\", false),\n    ],\n)","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"we can define render as","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"function WebIO.render(list::TodoList)\n    return dom\"div\"(\n        dom\"h2\"(list.title),\n        dom\"div.todo-list\"(\n            WebIO.render.(list.items)...\n        ),\n    )\nend","category":"page"},{"location":"extending/#","page":"Extending WebIO","title":"Extending WebIO","text":"Always remember to recursively WebIO.render any child elements if necessary.","category":"page"}]
}
